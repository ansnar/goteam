package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
)

type Metrics struct {
	Coverage           float64 `json:"coverage"`
	DuplicatedLines    int     `json:"duplicated_lines_density"`
	SqaleRating        float64 `json:"sqale_rating"`
	ReliabilityRating  float64 `json:"reliability_rating"`
	SecurityRating     float64 `json:"security_rating"`
}

func handlegeneratereport(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.ParseFiles("index.html"))
	tmpl.Execute(w, nil)
}

func generateReport(metrics Metrics) (string, error) {
	// Adjusting conditions for error and OK
	var (
		reliabilityStatus, securityStatus, coverageStatus, duplicatedLinesStatus, sqaleStatus string
	)

	if metrics.ReliabilityRating > 1 {
		reliabilityStatus = "error"
	} else {
		reliabilityStatus = "OK"
	}

	if metrics.SecurityRating > 1 {
		securityStatus = "error"
	} else {
		securityStatus = "OK"
	}

	if metrics.Coverage < 80.0 {
		coverageStatus = "error"
	} else {
		coverageStatus = "OK"
	}

	if metrics.DuplicatedLines > 10 {
		duplicatedLinesStatus = "error"
	} else {
		duplicatedLinesStatus = "OK"
	}

	if metrics.SqaleRating <= 1 {
		sqaleStatus = "error"
	} else {
		sqaleStatus = "OK"
	}

	report := fmt.Sprintf(`<!sonarqube> Project [CKS SLACK NOTIFIER PULGIN]analyzed. SEE <http://example.com/report> QUALITY GATE STATUS:

    - Security Rating on New Code: %s

    - Reliability Rating on New Code: %s

    - Maintainability Rating on New Code: %s

    - Coverage on New Code: %s

    - Duplicated Lines on New Code: %s
    `, securityStatus, reliabilityStatus, sqaleStatus, coverageStatus, duplicatedLinesStatus)

	return report, nil
}

func main() {
	// Create a new mux (router)
	mux := http.NewServeMux()

	// Handle generating report
	mux.HandleFunc("/generate-report", handlegeneratereport)

	// Sample metrics data
	metrics := Metrics{
		Coverage:          85.0,
		DuplicatedLines:   5,
		SqaleRating:       2.0,
		ReliabilityRating: 5.0,
		SecurityRating:    1.0,
	}

	report, err := generateReport(metrics)
	if err != nil {
		log.Printf("failed to generate report: %v", err)
	}

	fmt.Println("Report generated successfully:", report)

	// Start the server
	if err := http.ListenAndServe(":8080", mux); err != nil {
		panic(err)
	}
}
//Package Declaration:

go
Copy code
package main
This line declares that this Go file is part of the main package, which is the entry point for executable Go programs.

Import Statements:

go
Copy code
import (
    "fmt"
    "html/template"
    "log"
    "net/http"
)
These import statements bring in necessary packages from the Go standard library. fmt is used for formatting strings, html/template is used for HTML templating, log is used for logging, and net/http is used for handling HTTP requests and serving HTTP responses.

Struct Definition:

go
Copy code
type Metrics struct {
    Coverage           float64 `json:"coverage"`
    DuplicatedLines    int     `json:"duplicated_lines_density"`
    SqaleRating        float64 `json:"sqale_rating"`
    ReliabilityRating  float64 `json:"reliability_rating"`
    SecurityRating     float64 `json:"security_rating"`
}
This defines a struct named Metrics which represents various metrics data related to code quality. Each field in the struct corresponds to a specific metric.

HTML Handler:

go
Copy code
func handlegeneratereport(w http.ResponseWriter, r *http.Request) {
    tmpl := template.Must(template.ParseFiles("index.html"))
    tmpl.Execute(w, nil)
}
This function handles HTTP requests to the "/generate-report" path. It parses the "index.html" file using the html/template package and executes it, writing the result to the HTTP response.

Report Generation Function:

go
Copy code
func generateReport(metrics Metrics) (string, error) {
    // Adjusting conditions for error and OK
    var (
        reliabilityStatus, securityStatus, coverageStatus, duplicatedLinesStatus, sqaleStatus string
    )

    // Conditions for each metric to determine status
    // (error if condition met, OK otherwise)
    // Setting status strings based on conditions
    // ...

    // Constructing the report string with the determined status values
    report := fmt.Sprintf(`...`, securityStatus, reliabilityStatus, sqaleStatus, coverageStatus, duplicatedLinesStatus)

    return report, nil
}
This function generates a report string based on the provided metrics data. It evaluates various conditions for each metric to determine whether it should be labeled as "error" or "OK" and constructs the report string accordingly using fmt.Sprintf.

Main Function:

go
Copy code
func main() {
    // Create a new mux (router)
    mux := http.NewServeMux()

    // Handle generating report
    mux.HandleFunc("/generate-report", handlegeneratereport)

    // Sample metrics data
    metrics := Metrics{
        Coverage:          85.0,
        DuplicatedLines:   5,
        SqaleRating:       2.0,
        ReliabilityRating: 5.0,
        SecurityRating:    1.0,
    }

    // Generate the report
    report, err := generateReport(metrics)
    if err != nil {
        log.Printf("failed to generate report: %v", err)
    }

    fmt.Println("Report generated successfully:", report)

    // Start the server
    if err := http.ListenAndServe(":8080", mux); err != nil {
        panic(err)
    }
}
This is the entry point of the program, where execution begins.
It initializes a new HTTP request multiplexer (mux) using http.NewServeMux().
It registers the "/generate-report" path with the handlegeneratereport function to handle HTTP requests for generating reports.
It creates a Metrics object with sample metric data.
It generates the report using the generateReport function.
If an error occurs during report generation, it logs the error.
It starts an HTTP server on port 8080 using http.ListenAndServe. The server uses the mux to handle incoming requests.
I hope this breakdown helps you understand each part of the code better! Let me know if you have any further questions.//




